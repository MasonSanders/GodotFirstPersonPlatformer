[gd_scene load_steps=4 format=2]

[sub_resource type="CubeMesh" id=1]

[sub_resource type="Shader" id=2]
code = "shader_type spatial;

vec3 permute(vec3 x) {
	x = ((x * 34.0) + 1.0) * x;
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float simplex(vec2 coord) {
	const vec4 C = vec4((3.0 - sqrt(3.0)) / 6.0, 
						0.5 * (sqrt(3.0) - 1.0), 
						-0.577350269189626, 
						1.0 / 41.0);
	vec2 i = floor(coord + dot(coord, C.yy));
	vec2 x0 = coord - i + dot(i, C.xx);
	 
	vec2 i1 = vec2(0.0);
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	vec2 x1 = x0.xy + C.xx - i1;
	vec2 x2 = x0.xy + C.zz;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));
	
	vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x1,x1), dot(x2, x2)), 0.0);
	
	m = m * m;
	m = m * m;
	
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	
	m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
	vec3 g = vec3(0.0);
	g.x = a0.x * x0.x + h.x * x0.y;
	g.yz = a0.yz * vec2(x1.x, x2.x) + h.yz * vec2(x1.y, x2.y);
	
	return 130.0 * dot(m, g);
}

void fragment() {
	vec2 coord = UV * 10.0;
	coord.x *= 10.0;
	coord.y -= TIME;
	float value = simplex(coord);
	ALBEDO = vec3(value);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 1 )
material/0 = SubResource( 3 )
